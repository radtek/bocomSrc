// 明迈智能交通视频检测识别软件 V1.0
// Mimax Intelligent Transport Video Detection & Recognition Software V1.0
// 版权所有 2008 南京明迈视讯科技有限公司
// Copyright 2008 Nanjing Mimax Vision Technologies Ltd
// 明迈视讯公司秘密  Mimax Vision Confidential Proprietary
//
// 博康智能视频检测识别软件 V2.0
// Bocom Intelligent Video Detection & Recognition Software V2.0
// 版权所有 2008-2009 上海博康智能信息技术有限公司
// Copyright 2008-2009 Shanghai Bocom Intelligent Information Technologies Ltd
// 博康智能公司秘密   Bocom Intelligent Information Technologies Ltd Confidential Proprietary
//
//computer sift descriptor without scale

#ifdef  OPENCV245
	#include "opencv2/opencv.hpp"
	#include "opencv2/objdetect/objdetect.hpp" 
	#include "opencv2/features2d/features2d.hpp" 
	#include "opencv2/highgui/highgui.hpp" 
	#include "opencv2/calib3d/calib3d.hpp" 
	#include "opencv2/imgproc/imgproc_c.h" 
	#include "opencv2/imgproc/imgproc.hpp"   
	#include "opencv2/nonfree/features2d.hpp"
	#include "opencv2/legacy/legacy.hpp"
	using namespace cv; 
#else
	#include "cv.h"
	#include "highgui.h"
	#include "cxcore.h"
#endif


#ifndef SIFTDISTANCE
	#define SIFTDISTANCE 1.2e5//原来为1.5e5
#endif

//#define USE_FIX_RADIUS7_SIFT  //使用固定的半径的简化版sift

#ifndef LINUX
	#define USE_SSE_SIFT    //在window下调用sse测试，在服务器上有其他开关控制
#endif
#ifndef USE_MAG_CORRECT
	#define USE_MAG_CORRECT     //计算梯度幅值时，使用小幅值惩罚(eg. mag = 0.5*mag)!
#endif

#define USE_FIXED_RADIUS    //计算sift特征时，使用固定的半径(eg. radius = 7)!

#ifndef SIFT1_RELATE_TYPES
#define SIFT1_RELATE_TYPES

const double siftBinData[23] = {-2.16667, -1.83333, -1.5, -1.16667, -0.833333, -0.5, -0.166667, 
						 0.166667, 0.5, 0.833333, 1.16667, 1.5, 1.83333, 2.16667, 2.5, 2.83333, 
						 3.16667, 3.5, 3.83333, 4.16667, 4.5, 4.83333, 5.16667};
const double siftWeightData[529]=
{
0.0346967, 0.0464469, 0.0604732, 0.0765781, 0.0943154, 0.112979, 0.131628, 0.149154, 0.164383, 0.176204, 0.183701, 0.18627, 0.183701, 0.176204, 0.164383, 0.149154, 0.131628, 0.112979, 0.0943154, 0.0765781, 0.0604732, 0.0464469, 0.0346967, 
0.0464469, 0.0621765, 0.0809528, 0.102512, 0.126256, 0.15124, 0.176204, 0.199666, 0.220053, 0.235877, 0.245913, 0.249352, 0.245913, 0.235877, 0.220053, 0.199666, 0.176204, 0.15124, 0.126256, 0.102512, 0.0809528, 0.0621765, 0.0464469, 
0.0604732, 0.0809528, 0.105399, 0.133469, 0.164383, 0.196912, 0.229415, 0.259961, 0.286505, 0.307108, 0.320175, 0.324652, 0.320175, 0.307108, 0.286505, 0.259961, 0.229415, 0.196912, 0.164383, 0.133469, 0.105399, 0.0809528, 0.0604732, 
0.0765781, 0.102512, 0.133469, 0.169013, 0.208161, 0.249352, 0.290512, 0.329193, 0.362805, 0.388896, 0.405442, 0.411112, 0.405442, 0.388896, 0.362805, 0.329193, 0.290512, 0.249352, 0.208161, 0.169013, 0.133469, 0.102512, 0.0765781, 
0.0943154, 0.126256, 0.164383, 0.208161, 0.256376, 0.307108, 0.357801, 0.405442, 0.44684, 0.478973, 0.499352, 0.506336, 0.499352, 0.478973, 0.44684, 0.405442, 0.357801, 0.307108, 0.256376, 0.208161, 0.164383, 0.126256, 0.0943154, 
0.112979, 0.15124, 0.196912, 0.249352, 0.307108, 0.367879, 0.428604, 0.485672, 0.535261, 0.573753, 0.598165, 0.606531, 0.598165, 0.573753, 0.535261, 0.485672, 0.428604, 0.367879, 0.307108, 0.249352, 0.196912, 0.15124, 0.112979, 
0.131628, 0.176204, 0.229415, 0.290512, 0.357801, 0.428604, 0.499352, 0.56584, 0.623615, 0.668461, 0.696902, 0.706648, 0.696902, 0.668461, 0.623615, 0.56584, 0.499352, 0.428604, 0.357801, 0.290512, 0.229415, 0.176204, 0.131628, 
0.149154, 0.199666, 0.259961, 0.329193, 0.405442, 0.485672, 0.56584, 0.64118, 0.706648, 0.757465, 0.789693, 0.800737, 0.789693, 0.757465, 0.706648, 0.64118, 0.56584, 0.485672, 0.405442, 0.329193, 0.259961, 0.199666, 0.149154, 
0.164383, 0.220053, 0.286505, 0.362805, 0.44684, 0.535261, 0.623615, 0.706648, 0.778801, 0.834806, 0.870325, 0.882497, 0.870325, 0.834806, 0.778801, 0.706648, 0.623615, 0.535261, 0.44684, 0.362805, 0.286505, 0.220053, 0.164383, 
0.176204, 0.235877, 0.307108, 0.388896, 0.478973, 0.573753, 0.668461, 0.757465, 0.834806, 0.894839, 0.932912, 0.945959, 0.932912, 0.894839, 0.834806, 0.757465, 0.668461, 0.573753, 0.478973, 0.388896, 0.307108, 0.235877, 0.176204, 
0.183701, 0.245913, 0.320175, 0.405442, 0.499352, 0.598165, 0.696902, 0.789693, 0.870325, 0.932912, 0.972604, 0.986207, 0.972604, 0.932912, 0.870325, 0.789693, 0.696902, 0.598165, 0.499352, 0.405442, 0.320175, 0.245913, 0.183701, 
0.18627, 0.249352, 0.324652, 0.411112, 0.506336, 0.606531, 0.706648, 0.800737, 0.882497, 0.945959, 0.986207, 1, 0.986207, 0.945959, 0.882497, 0.800737, 0.706648, 0.606531, 0.506336, 0.411112, 0.324652, 0.249352, 0.18627, 
0.183701, 0.245913, 0.320175, 0.405442, 0.499352, 0.598165, 0.696902, 0.789693, 0.870325, 0.932912, 0.972604, 0.986207, 0.972604, 0.932912, 0.870325, 0.789693, 0.696902, 0.598165, 0.499352, 0.405442, 0.320175, 0.245913, 0.183701, 
0.176204, 0.235877, 0.307108, 0.388896, 0.478973, 0.573753, 0.668461, 0.757465, 0.834806, 0.894839, 0.932912, 0.945959, 0.932912, 0.894839, 0.834806, 0.757465, 0.668461, 0.573753, 0.478973, 0.388896, 0.307108, 0.235877, 0.176204, 
0.164383, 0.220053, 0.286505, 0.362805, 0.44684, 0.535261, 0.623615, 0.706648, 0.778801, 0.834806, 0.870325, 0.882497, 0.870325, 0.834806, 0.778801, 0.706648, 0.623615, 0.535261, 0.44684, 0.362805, 0.286505, 0.220053, 0.164383, 
0.149154, 0.199666, 0.259961, 0.329193, 0.405442, 0.485672, 0.56584, 0.64118, 0.706648, 0.757465, 0.789693, 0.800737, 0.789693, 0.757465, 0.706648, 0.64118, 0.56584, 0.485672, 0.405442, 0.329193, 0.259961, 0.199666, 0.149154, 
0.131628, 0.176204, 0.229415, 0.290512, 0.357801, 0.428604, 0.499352, 0.56584, 0.623615, 0.668461, 0.696902, 0.706648, 0.696902, 0.668461, 0.623615, 0.56584, 0.499352, 0.428604, 0.357801, 0.290512, 0.229415, 0.176204, 0.131628, 
0.112979, 0.15124, 0.196912, 0.249352, 0.307108, 0.367879, 0.428604, 0.485672, 0.535261, 0.573753, 0.598165, 0.606531, 0.598165, 0.573753, 0.535261, 0.485672, 0.428604, 0.367879, 0.307108, 0.249352, 0.196912, 0.15124, 0.112979, 
0.0943154, 0.126256, 0.164383, 0.208161, 0.256376, 0.307108, 0.357801, 0.405442, 0.44684, 0.478973, 0.499352, 0.506336, 0.499352, 0.478973, 0.44684, 0.405442, 0.357801, 0.307108, 0.256376, 0.208161, 0.164383, 0.126256, 0.0943154, 
0.0765781, 0.102512, 0.133469, 0.169013, 0.208161, 0.249352, 0.290512, 0.329193, 0.362805, 0.388896, 0.405442, 0.411112, 0.405442, 0.388896, 0.362805, 0.329193, 0.290512, 0.249352, 0.208161, 0.169013, 0.133469, 0.102512, 0.0765781, 
0.0604732, 0.0809528, 0.105399, 0.133469, 0.164383, 0.196912, 0.229415, 0.259961, 0.286505, 0.307108, 0.320175, 0.324652, 0.320175, 0.307108, 0.286505, 0.259961, 0.229415, 0.196912, 0.164383, 0.133469, 0.105399, 0.0809528, 0.0604732, 
0.0464469, 0.0621765, 0.0809528, 0.102512, 0.126256, 0.15124, 0.176204, 0.199666, 0.220053, 0.235877, 0.245913, 0.249352, 0.245913, 0.235877, 0.220053, 0.199666, 0.176204, 0.15124, 0.126256, 0.102512, 0.0809528, 0.0621765, 0.0464469, 
0.0346967, 0.0464469, 0.0604732, 0.0765781, 0.0943154, 0.112979, 0.131628, 0.149154, 0.164383, 0.176204, 0.183701, 0.18627, 0.183701, 0.176204, 0.164383, 0.149154, 0.131628, 0.112979, 0.0943154, 0.0765781, 0.0604732, 0.0464469, 0.0346967
};


const double siftBinData0_9[21] = {-2.2037, -1.83333, -1.46296, -1.09259, -0.722222, -0.351852, 0.0185184, 0.388889,0.759259, 
1.12963, 1.5, 1.87037, 2.24074, 2.61111, 2.98148, 3.35185,3.72222, 4.09259, 4.46296, 4.83333,5.2037};
const double siftWeightData0_9[441]=
{0.0324078, 0.0448888, 0.0600804, 0.0777023, 0.0971051, 0.117262, 0.136829, 0.154278, 0.168088, 0.176961, 0.180022, 0.176961, 0.168088, 0.154278, 0.136829, 0.117262, 0.0971051, 0.0777023, 0.0600804, 0.0448888, 0.0324078, 
0.0448888, 0.0621765, 0.0832187, 0.107627, 0.134502, 0.162422, 0.189524, 0.213694, 0.232823, 0.245113, 0.249352, 0.245113, 0.232823, 0.213694, 0.189524, 0.162422, 0.134502, 0.107627, 0.0832187, 0.0621765, 0.0448888, 
0.0600804, 0.0832187, 0.111382, 0.144051, 0.180022, 0.21739, 0.253665, 0.286014, 0.311617, 0.328066, 0.33374, 0.328066, 0.311617, 0.286014, 0.253665, 0.21739, 0.180022, 0.144051, 0.111382, 0.0832187, 0.0600804, 
0.0777023, 0.107627, 0.144051, 0.186302, 0.232823, 0.281152, 0.328066, 0.369904, 0.403016, 0.42429, 0.431628, 0.42429, 0.403016, 0.369904, 0.328066, 0.281152, 0.232823, 0.186302, 0.144051, 0.107627, 0.0777023, 
0.0971051, 0.134502, 0.180022, 0.232823, 0.29096, 0.351357, 0.409986, 0.462271, 0.503651, 0.530237, 0.539407, 0.530237, 0.503651, 0.462271, 0.409986, 0.351357, 0.29096, 0.232823, 0.180022, 0.134502, 0.0971051, 
0.117262, 0.162422, 0.21739, 0.281152, 0.351357, 0.42429, 0.495089, 0.558227, 0.608197, 0.640301, 0.651375, 0.640301, 0.608197, 0.558227, 0.495089, 0.42429, 0.351357, 0.281152, 0.21739, 0.162422, 0.117262, 
0.136829, 0.189524, 0.253665, 0.328066, 0.409986, 0.495089, 0.577702, 0.651375, 0.709684, 0.747146, 0.760067, 0.747146, 0.709684, 0.651375, 0.577702, 0.495089, 0.409986, 0.328066, 0.253665, 0.189524, 0.136829, 
0.154278, 0.213694, 0.286014, 0.369904, 0.462271, 0.558227, 0.651375, 0.734444, 0.800188, 0.842427, 0.856997, 0.842427, 0.800188, 0.734444, 0.651375, 0.558227, 0.462271, 0.369904, 0.286014, 0.213694, 0.154278, 
0.168088, 0.232823, 0.311617, 0.403016, 0.503651, 0.608197, 0.709684, 0.800188, 0.871818, 0.917838, 0.933712, 0.917838, 0.871818, 0.800188, 0.709684, 0.608197, 0.503651, 0.403016, 0.311617, 0.232823, 0.168088, 
0.176961, 0.245113, 0.328066, 0.42429, 0.530237, 0.640301, 0.747146, 0.842427, 0.917838, 0.966288, 0.982999, 0.966288, 0.917838, 0.842427, 0.747146, 0.640301, 0.530237, 0.42429, 0.328066, 0.245113, 0.176961, 
0.180022, 0.249352, 0.33374, 0.431628, 0.539407, 0.651375, 0.760067, 0.856997, 0.933712, 0.982999, 1, 0.982999, 0.933712, 0.856997, 0.760067, 0.651375, 0.539407, 0.431628, 0.33374, 0.249352, 0.180022, 
0.176961, 0.245113, 0.328066, 0.42429, 0.530237, 0.640301, 0.747146, 0.842427, 0.917838, 0.966288, 0.982999, 0.966288, 0.917838, 0.842427, 0.747146, 0.640301, 0.530237, 0.42429, 0.328066, 0.245113, 0.176961, 
0.168088, 0.232823, 0.311617, 0.403016, 0.503651, 0.608197, 0.709684, 0.800188, 0.871818, 0.917838, 0.933712, 0.917838, 0.871818, 0.800188, 0.709684, 0.608197, 0.503651, 0.403016, 0.311617, 0.232823, 0.168088, 
0.154278, 0.213694, 0.286014, 0.369904, 0.462271, 0.558227, 0.651375, 0.734444, 0.800188, 0.842427, 0.856997, 0.842427, 0.800188, 0.734444, 0.651375, 0.558227, 0.462271, 0.369904, 0.286014, 0.213694, 0.154278, 
0.136829, 0.189524, 0.253665, 0.328066, 0.409986, 0.495089, 0.577702, 0.651375, 0.709684, 0.747146, 0.760067, 0.747146, 0.709684, 0.651375, 0.577702, 0.495089, 0.409986, 0.328066, 0.253665, 0.189524, 0.136829, 
0.117262, 0.162422, 0.21739, 0.281152, 0.351357, 0.42429, 0.495089, 0.558227, 0.608197, 0.640301, 0.651375, 0.640301, 0.608197, 0.558227, 0.495089, 0.42429, 0.351357, 0.281152, 0.21739, 0.162422, 0.117262, 
0.0971051, 0.134502, 0.180022, 0.232823, 0.29096, 0.351357, 0.409986, 0.462271, 0.503651, 0.530237, 0.539407, 0.530237, 0.503651, 0.462271, 0.409986, 0.351357, 0.29096, 0.232823, 0.180022, 0.134502, 0.0971051, 
0.0777023, 0.107627, 0.144051, 0.186302, 0.232823, 0.281152, 0.328066, 0.369904, 0.403016, 0.42429, 0.431628, 0.42429, 0.403016, 0.369904, 0.328066, 0.281152, 0.232823, 0.186302, 0.144051, 0.107627, 0.0777023, 
0.0600804, 0.0832187, 0.111382, 0.144051, 0.180022, 0.21739, 0.253665, 0.286014, 0.311617, 0.328066, 0.33374, 0.328066, 0.311617, 0.286014, 0.253665, 0.21739, 0.180022, 0.144051, 0.111382, 0.0832187, 0.0600804, 
0.0448888, 0.0621765, 0.0832187, 0.107627, 0.134502, 0.162422, 0.189524, 0.213694, 0.232823, 0.245113, 0.249352, 0.245113, 0.232823, 0.213694, 0.189524, 0.162422, 0.134502, 0.107627, 0.0832187, 0.0621765, 0.0448888, 
0.0324078, 0.0448888, 0.0600804, 0.0777023, 0.0971051, 0.117262, 0.136829, 0.154278, 0.168088, 0.176961, 0.180022, 0.176961, 0.168088, 0.154278, 0.136829, 0.117262, 0.0971051, 0.0777023, 0.0600804, 0.0448888, 0.0324078
};

const double siftBinData0_8[17] = {
-1.83333, -1.41667, -1, -0.583333, -0.166667, 0.25, 0.666667, 1.08333, 1.5, 1.91667, 2.33333, 2.75, 3.16667, 3.58333, 4, 4.41667, 4.83333
};
const double siftWeightData0_8[289]  = {
0.0621765, 0.0860991, 0.114162, 0.144942, 0.176204, 0.205112, 0.22862, 0.243999, 0.249352, 0.243999, 0.22862, 0.205112, 0.176204, 0.144942, 0.114162, 0.0860991, 0.0621765, 
0.0860991, 0.119226, 0.158086, 0.200708, 0.243999, 0.284029, 0.316582, 0.337878, 0.345291, 0.337878, 0.316582, 0.284029, 0.243999, 0.200708, 0.158086, 0.119226, 0.0860991, 
0.114162, 0.158086, 0.209611, 0.266126, 0.323527, 0.376603, 0.419767, 0.448005, 0.457833, 0.448005, 0.419767, 0.376603, 0.323527, 0.266126, 0.209611, 0.158086, 0.114162, 
0.144942, 0.200708, 0.266126, 0.337878, 0.410756, 0.478142, 0.532943, 0.568794, 0.581273, 0.568794, 0.532943, 0.478142, 0.410756, 0.337878, 0.266126, 0.200708, 0.144942, 
0.176204, 0.243999, 0.323527, 0.410756, 0.499352, 0.581273, 0.647894, 0.691478, 0.706648, 0.691478, 0.647894, 0.581273, 0.499352, 0.410756, 0.323527, 0.243999, 0.176204, 
0.205112, 0.284029, 0.376603, 0.478142, 0.581273, 0.676634, 0.754185, 0.804919, 0.822578, 0.804919, 0.754185, 0.676634, 0.581273, 0.478142, 0.376603, 0.284029, 0.205112, 
0.22862, 0.316582, 0.419767, 0.532943, 0.647894, 0.754185, 0.840624, 0.897173, 0.916855, 0.897173, 0.840624, 0.754185, 0.647894, 0.532943, 0.419767, 0.316582, 0.22862, 
0.243999, 0.337878, 0.448005, 0.568794, 0.691478, 0.804919, 0.897173, 0.957526, 0.978532, 0.957526, 0.897173, 0.804919, 0.691478, 0.568794, 0.448005, 0.337878, 0.243999, 
0.249352, 0.345291, 0.457833, 0.581273, 0.706648, 0.822578, 0.916855, 0.978532, 1, 0.978532, 0.916855, 0.822578, 0.706648, 0.581273, 0.457833, 0.345291, 0.249352, 
0.243999, 0.337878, 0.448005, 0.568794, 0.691478, 0.804919, 0.897173, 0.957526, 0.978532, 0.957526, 0.897173, 0.804919, 0.691478, 0.568794, 0.448005, 0.337878, 0.243999, 
0.22862, 0.316582, 0.419767, 0.532943, 0.647894, 0.754185, 0.840624, 0.897173, 0.916855, 0.897173, 0.840624, 0.754185, 0.647894, 0.532943, 0.419767, 0.316582, 0.22862, 
0.205112, 0.284029, 0.376603, 0.478142, 0.581273, 0.676634, 0.754185, 0.804919, 0.822578, 0.804919, 0.754185, 0.676634, 0.581273, 0.478142, 0.376603, 0.284029, 0.205112, 
0.176204, 0.243999, 0.323527, 0.410756, 0.499352, 0.581273, 0.647894, 0.691478, 0.706648, 0.691478, 0.647894, 0.581273, 0.499352, 0.410756, 0.323527, 0.243999, 0.176204, 
0.144942, 0.200708, 0.266126, 0.337878, 0.410756, 0.478142, 0.532943, 0.568794, 0.581273, 0.568794, 0.532943, 0.478142, 0.410756, 0.337878, 0.266126, 0.200708, 0.144942, 
0.114162, 0.158086, 0.209611, 0.266126, 0.323527, 0.376603, 0.419767, 0.448005, 0.457833, 0.448005, 0.419767, 0.376603, 0.323527, 0.266126, 0.209611, 0.158086, 0.114162, 
0.0860991, 0.119226, 0.158086, 0.200708, 0.243999, 0.284029, 0.316582, 0.337878, 0.345291, 0.337878, 0.316582, 0.284029, 0.243999, 0.200708, 0.158086, 0.119226, 0.0860991, 
0.0621765, 0.0860991, 0.114162, 0.144942, 0.176204, 0.205112, 0.22862, 0.243999, 0.249352, 0.243999, 0.22862, 0.205112, 0.176204, 0.144942, 0.114162, 0.0860991, 0.0621765
};

const double siftBinData0_7[15] = {
-1.83333, -1.35714, -0.880952, -0.404762, 0.0714285, 0.547619, 1.02381, 1.5, 1.97619, 2.45238, 2.92857, 3.40476, 3.88095, 4.35714, 4.83333
};
const double siftWeightData0_7[225]  = {
0.0621765, 0.0898785, 0.122762, 0.158436, 0.193207, 0.222625, 0.242384, 0.249352, 0.242384, 0.222625, 0.193207, 0.158436, 0.122762, 0.0898785, 0.0621765, 
0.0898785, 0.129923, 0.177457, 0.229025, 0.279288, 0.321812, 0.350374, 0.360448, 0.350374, 0.321812, 0.279288, 0.229025, 0.177457, 0.129923, 0.0898785, 
0.122762, 0.177457, 0.242384, 0.312819, 0.381472, 0.439554, 0.478566, 0.492325, 0.478566, 0.439554, 0.381472, 0.312819, 0.242384, 0.177457, 0.122762, 
0.158436, 0.229025, 0.312819, 0.403722, 0.492325, 0.567285, 0.617634, 0.635391, 0.617634, 0.567285, 0.492325, 0.403722, 0.312819, 0.229025, 0.158436, 
0.193207, 0.279288, 0.381472, 0.492325, 0.600373, 0.691785, 0.753183, 0.774837, 0.753183, 0.691785, 0.600373, 0.492325, 0.381472, 0.279288, 0.193207, 
0.222625, 0.321812, 0.439554, 0.567285, 0.691785, 0.797114, 0.867861, 0.892812, 0.867861, 0.797114, 0.691785, 0.567285, 0.439554, 0.321812, 0.222625, 
0.242384, 0.350374, 0.478566, 0.617634, 0.753183, 0.867861, 0.944888, 0.972053, 0.944888, 0.867861, 0.753183, 0.617634, 0.478566, 0.350374, 0.242384, 
0.249352, 0.360448, 0.492325, 0.635391, 0.774837, 0.892812, 0.972053, 1, 0.972053, 0.892812, 0.774837, 0.635391, 0.492325, 0.360448, 0.249352, 
0.242384, 0.350374, 0.478566, 0.617634, 0.753183, 0.867861, 0.944888, 0.972053, 0.944888, 0.867861, 0.753183, 0.617634, 0.478566, 0.350374, 0.242384, 
0.222625, 0.321812, 0.439554, 0.567285, 0.691785, 0.797114, 0.867861, 0.892812, 0.867861, 0.797114, 0.691785, 0.567285, 0.439554, 0.321812, 0.222625, 
0.193207, 0.279288, 0.381472, 0.492325, 0.600373, 0.691785, 0.753183, 0.774837, 0.753183, 0.691785, 0.600373, 0.492325, 0.381472, 0.279288, 0.193207, 
0.158436, 0.229025, 0.312819, 0.403722, 0.492325, 0.567285, 0.617634, 0.635391, 0.617634, 0.567285, 0.492325, 0.403722, 0.312819, 0.229025, 0.158436, 
0.122762, 0.177457, 0.242384, 0.312819, 0.381472, 0.439554, 0.478566, 0.492325, 0.478566, 0.439554, 0.381472, 0.312819, 0.242384, 0.177457, 0.122762, 
0.0898785, 0.129923, 0.177457, 0.229025, 0.279288, 0.321812, 0.350374, 0.360448, 0.350374, 0.321812, 0.279288, 0.229025, 0.177457, 0.129923, 0.0898785, 
0.0621765, 0.0898785, 0.122762, 0.158436, 0.193207, 0.222625, 0.242384, 0.249352, 0.242384, 0.222625, 0.193207, 0.158436, 0.122762, 0.0898785, 0.0621765, 
};

const double siftBinData0_6[13]={
-1.83333, -1.27778, -0.722222, -0.166667, 0.388889, 0.944444, 1.5, 2.05556, 2.61111, 3.16667, 3.72222, 4.27778, 4.83333
};
const double siftWeightData0_6[169] = {
0.0621766, 0.095046, 0.134503, 0.176204, 0.213694, 0.239915, 0.249352, 0.239915, 0.213694, 0.176204, 0.134503, 0.095046, 0.0621766, 
0.095046, 0.145292, 0.205607, 0.269354, 0.326663, 0.366746, 0.381171, 0.366746, 0.326663, 0.269354, 0.205607, 0.145292, 0.095046, 
0.134503, 0.205607, 0.29096, 0.381171, 0.462271, 0.518993, 0.539408, 0.518993, 0.462271, 0.381171, 0.29096, 0.205607, 0.134503, 
0.176204, 0.269354, 0.381171, 0.499352, 0.605595, 0.679905, 0.706648, 0.679905, 0.605595, 0.499352, 0.381171, 0.269354, 0.176204, 
0.213694, 0.326663, 0.462271, 0.605595, 0.734444, 0.824563, 0.856997, 0.824563, 0.734444, 0.605595, 0.462271, 0.326663, 0.213694, 
0.239915, 0.366746, 0.518993, 0.679905, 0.824563, 0.925741, 0.962155, 0.925741, 0.824563, 0.679905, 0.518993, 0.366746, 0.239915, 
0.249352, 0.381171, 0.539408, 0.706648, 0.856997, 0.962155, 1, 0.962155, 0.856997, 0.706648, 0.539408, 0.381171, 0.249352, 
0.239915, 0.366746, 0.518993, 0.679905, 0.824563, 0.925741, 0.962155, 0.925741, 0.824563, 0.679905, 0.518993, 0.366746, 0.239915, 
0.213694, 0.326663, 0.462271, 0.605595, 0.734444, 0.824563, 0.856997, 0.824563, 0.734444, 0.605595, 0.462271, 0.326663, 0.213694, 
0.176204, 0.269354, 0.381171, 0.499352, 0.605595, 0.679905, 0.706648, 0.679905, 0.605595, 0.499352, 0.381171, 0.269354, 0.176204, 
0.134503, 0.205607, 0.29096, 0.381171, 0.462271, 0.518993, 0.539408, 0.518993, 0.462271, 0.381171, 0.29096, 0.205607, 0.134503, 
0.095046, 0.145292, 0.205607, 0.269354, 0.326663, 0.366746, 0.381171, 0.366746, 0.326663, 0.269354, 0.205607, 0.145292, 0.095046, 
0.0621766, 0.095046, 0.134503, 0.176204, 0.213694, 0.239915, 0.249352, 0.239915, 0.213694, 0.176204, 0.134503, 0.095046, 0.0621766
};
typedef struct MatchResult
{
	int num;
	int index[2];
	int dist[2];
}MatchResult;

typedef struct MyPoint
{
	CvPoint2D32f point;
	int biaohao;
}MyPoint;

typedef struct MyDescriptor
{
	uchar* descriptor;
	int biaohao;

	MyDescriptor()
	{
		descriptor = NULL;
		biaohao = -1;
	}
}MyDescriptor;
#endif


#ifndef _MY_SIFT1_DESCR_H
#define _MY_SIFT1_DESCR_H

#if defined(WIN32) && !defined(__cplusplus) //or rename .c to .cpp
#define inline __inline 
#endif

//////////////////////////////////////////////////////////////////////////
class MySIFT{

public:
	//inline function to return a pixel value from a 32-bit floating point image
	inline float mvpixval32f(IplImage* img, int r, int c)
	{
	  return ( (float*)(img->imageData + img->widthStep*r) )[c];
	}

	inline uchar mvpixval8u(IplImage* img, int r, int c)
	{
	  return ( (uchar*)(img->imageData + img->widthStep*r) )[c];
	}

	void mvcalc_keypt_oris(IplImage* image,
		int num_keypts,CvPoint *corners,float *orient);

	float* mvorient_histo( IplImage* img, int row, int col, 
		int bins, int radius, float weight_sig );

	void mvsmooth_histo( float* histo, int bins );

	int mvcalc_grad_mag_ori(IplImage* img, int r, int c,
		float* mag, float* ori );

	void mvcalc_grad_mag_ori_simpled(IplImage* img, 
		int r, int c, float* mag, float* ori );

	int mvcalc_rgbImg_grad_mag_ori(IplImage* img, 
		int r, int c, float* mag, float* ori );

	void mvcalc_rgbImg_grad_mag_ori_simpled( IplImage* img, 
		int r, int c, float* mag, float* ori );

	//compute descriptors
	void mvcompute_descriptors(uchar **descriptor,
		IplImage* image,int num_keypts,CvPoint2D32f *corners,
		float *orient,int n, int bins ); 

	void mvcompute_descriptors_scale(uchar** descriptor,
		IplImage* image,int num_keypts,CvPoint2D32f* corners,
		float *orient,int n, int bins );

	void mvcompute_descriptors_new(uchar** descriptor,
		IplImage* image,int num_keypts,CvPoint2D32f* corners,
		float *orient,int n, int bins );

	float*** mvdescr_histos( IplImage* gauss_img, 
		int row, int col,float theta, float scale, 
		int n, int bins, float ***histos);

	void mvCalcGaussWight( int n, int radius, float fAWeight[30][30] );
	void interp_hist_entry( float*** hist, float rbin, float cbin,
							float obin, float mag, int d, int n );
	float*** mvdescr_histos_simpled( IplImage* img, int row, int col, 
				 int n, int bins, int radius, float fAWeight[30][30],
				 float ***histos );

	//老贺提出计算权重有点bug后修改的版本,根据MySIFT::mvadd_to_descr_histos_new()函数来优化，
	//    原版本与MySIFT::mvadd_to_descr_histos()对应！
	void mvadd_to_descr_histos_sse(	int n, int buf_length, 
		float *arr_mag, float *arr_weight, float *arr_rbin,
		float *arr_cbin, float *arr_obin, int *arr_r0, int *arr_c0,
		int *arr_ob, int *arr_ob2, int *ro_co_flag, int *ro_co_1_flag, 
		int *ro_1_co_flag, int *ro_1_co_1_flag,	float *ro_co_entry,
		float *ro_co_entry2, float *ro_co_1_entry, float *ro_co_1_entry2, 
		float *ro_1_co_entry, float *ro_1_co_entry2, float *ro_1_co_1_entry, 
		float *ro_1_co_1_entry2);
	
	//修改的版本！*mag *= 0.5f; //减弱小幅值的点的影响!
	void mvcalc_grad_mag_ori_sse(IplImage* img, 
		int r_count, int c_count, uchar *inisrc,
		float *arr_mag, int *arr_ori_flag, 
		float *arr_x, float *arr_y);

	float*** mvdescr_histos_sse(IplImage* gauss_img, 
		  int row, int col,float theta, float scale, 
		  int n, int bins, float ***histos);

	//float*** mvdescr_histos( IplImage* grad_img, IplImage* ori_img, int row, int col,
	//		       float theta, float scale, int n, int bins );

	void mvadd_to_descr_histos( float*** histos,
			 float rbin, float cbin, float obin, 
			 float mag, int n, int bins );

	void mvadd_to_descr_histos_new( float*** histos,
				 float rbin, float cbin, float obin,
				 float mag, int n, int bins );

	//uchar* histos_to_descr( float*** histos, int n, int bins );
	void mvhistos_to_descr( uchar *uchar_descr,
			  float*** histos, int n, int bins, 
			  float* float_descr );

	void mvnormalize_vec( float* vec, int n );

	void mvrelease_descr_histos( float**** histos, int n );

	int mvDistSquared(unsigned char *pk1, unsigned char *pk2);

	MatchResult mvCheckForMatchResult(CvPoint2D32f &pt, 
		unsigned char *key, MyDescriptor* klist,  int keypt_count);

	MatchResult mvCheckForMatchResult(CvPoint2D32f &pt,
		unsigned char *key, MyDescriptor* klist,  CvPoint2D32f *points,
		int keypt_count, const CvRect &searchArea);

	int mvCheckForMatch(unsigned char *key,	unsigned char **klist, 
						int keypt_count);

	int mvCheckForMatch(unsigned char *key,	MyDescriptor* klist,
						int keypt_count);//函数重载
	 

	/******************************* Defs and macros *****************************/

	#ifndef TRUE
		#define TRUE 1
	#endif

	#ifndef FALSE
		#define FALSE 0
	#endif

	#ifndef PI
		#define PI 3.14159265358979323846
	#endif

	#ifndef PIx2
		#define PIx2 6.28318530717958647692
	#endif
	// 
	// /* default number of sampled intervals per octave */
	// #define INTERVALS 3
	// 
	// /* default sigma for initial gaussian smoothing */
	// #define SIGMA 1.6
	// 
	// /* default threshold on keypoint contrast |D(x)| */
	// #define CONTRAST_THRESH 0.04
	// 
	// /* default threshold on keypoint ratio of principle curvatures */
	// #define CURVATURE_THRESH 10
	// 
	// /* double image size before pyramid construction? */
	// #define DOUBLE_IMAGE TRUE
	// 
	// /* default width of descriptor histogram array */
	// #define DESCR_WIDTH 4
	// 
	// /* default number of bins per histogram in descriptor array */
	// #define DESCR_HISTO_BINS 8
	// 
	// /* assumed gaussian blur for input image */
	// #define INIT_SIGMA 0.5
	// 
	// /* width of border in which to ignore keypoints */
	// #define BORDER 5
	// 
	// /* maximum steps of keypoint interpolation before failure */
	// #define MAX_INTERP_STEPS 5

	/* number of bins in histogram for orientation assignment */
	#define ORIENT_HISTO_BINS 36

	/* determines gaussian sigma for orientation assignment */
	#define ORIENT_SIG_FACTOR 1.5

	/* number of passes of orientation histogram smoothing */
	#define ORIENT_SMOOTH_PASSES 4

	/* orientation histo peak magnitude relative max that results in new keypt */
	//#define ORIENT_PEAK_RATIO 0.8

	/* determines the size of a single descriptor orientation histogram */
	#define DESCR_SCALE_FACTOR 3.0

	/* threshold on magnitude of elements of descriptor vector */
	#define DESCR_MAG_THRESH 0.2

	/* factor used to convert floating-point descriptor to unsigned char */
	#define INT_DESCR_FACTOR 512.0

};//namespace sift{


#endif
